# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:48:22+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, confloat, conint, constr


class AcceleratorManufacturer(Enum):
    nvidia = 'nvidia'
    amd = 'amd'
    amazon_web_services = 'amazon-web-services'
    xilinx = 'xilinx'


class AcceleratorManufacturers(RootModel[List[AcceleratorManufacturer]]):
    root: List[AcceleratorManufacturer]


class AcceleratorName(Enum):
    a100 = 'a100'
    v100 = 'v100'
    k80 = 'k80'
    t4 = 't4'
    m60 = 'm60'
    radeon_pro_v520 = 'radeon-pro-v520'
    vu9p = 'vu9p'


class AcceleratorNames(RootModel[List[AcceleratorName]]):
    root: List[AcceleratorName]


class AcceleratorType(Enum):
    gpu = 'gpu'
    fpga = 'fpga'
    inference = 'inference'


class AcceleratorTypes(RootModel[List[AcceleratorType]]):
    root: List[AcceleratorType]


class ActiveInstanceRefreshNotFoundFault(RootModel[Any]):
    root: Any


class AllowedInstanceType(
    RootModel[constr(pattern=r'[a-zA-Z0-9\.\*]+', min_length=1, max_length=30)]
):
    root: constr(pattern=r'[a-zA-Z0-9\.\*]+', min_length=1, max_length=30)


class AllowedInstanceTypes(RootModel[List[AllowedInstanceType]]):
    root: List[AllowedInstanceType] = Field(..., max_length=400)


class AlreadyExistsFault(RootModel[Any]):
    root: Any


class AsciiStringMaxLen255(
    RootModel[constr(pattern=r'[A-Za-z0-9\-_\/]+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[A-Za-z0-9\-_\/]+', min_length=1, max_length=255)


class AssociatePublicIpAddress(RootModel[bool]):
    root: bool


class AttachLoadBalancerTargetGroupsResultType(BaseModel):
    pass


class AttachLoadBalancersResultType(BaseModel):
    pass


class AttachTrafficSourcesResultType(BaseModel):
    pass


class AutoRollback(RootModel[bool]):
    root: bool


class AutoScalingGroupDesiredCapacity(RootModel[int]):
    root: int


class AutoScalingGroupMaxSize(RootModel[int]):
    root: int


class AutoScalingGroupMinSize(RootModel[int]):
    root: int


class AutoScalingGroupPredictedCapacity(RootModel[int]):
    root: int


class AutoScalingGroupState(RootModel[constr(min_length=1, max_length=32)]):
    root: constr(min_length=1, max_length=32)


class BareMetal(Enum):
    included = 'included'
    excluded = 'excluded'
    required = 'required'


class BlockDeviceEbsDeleteOnTermination(RootModel[bool]):
    root: bool


class BlockDeviceEbsEncrypted(RootModel[bool]):
    root: bool


class BlockDeviceEbsIops(RootModel[conint(ge=100, le=20000)]):
    root: conint(ge=100, le=20000)


class BlockDeviceEbsThroughput(RootModel[conint(ge=125, le=1000)]):
    root: conint(ge=125, le=1000)


class BlockDeviceEbsVolumeSize(RootModel[conint(ge=1, le=16384)]):
    root: conint(ge=1, le=16384)


class BlockDeviceEbsVolumeType(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class BurstablePerformance(Enum):
    included = 'included'
    excluded = 'excluded'
    required = 'required'


class CapacityRebalanceEnabled(RootModel[bool]):
    root: bool


class CheckpointDelay(RootModel[conint(ge=0, le=172800)]):
    root: conint(ge=0, le=172800)


class CompleteLifecycleActionAnswer(BaseModel):
    pass


class Context(RootModel[str]):
    root: str


class Cooldown(RootModel[int]):
    root: int


class CpuManufacturer(Enum):
    intel = 'intel'
    amd = 'amd'
    amazon_web_services = 'amazon-web-services'


class CpuManufacturers(RootModel[List[CpuManufacturer]]):
    root: List[CpuManufacturer]


class DefaultInstanceWarmup(RootModel[int]):
    root: int


class DeleteLifecycleHookAnswer(BaseModel):
    pass


class DeleteWarmPoolAnswer(BaseModel):
    pass


class DetachLoadBalancerTargetGroupsResultType(BaseModel):
    pass


class DetachLoadBalancersResultType(BaseModel):
    pass


class DetachTrafficSourcesResultType(BaseModel):
    pass


class DisableScaleIn(RootModel[bool]):
    root: bool


class EbsOptimized(RootModel[bool]):
    root: bool


class EstimatedInstanceWarmup(RootModel[int]):
    root: int


class ExcludedInstance(
    RootModel[constr(pattern=r'[a-zA-Z0-9\.\*]+', min_length=1, max_length=30)]
):
    root: constr(pattern=r'[a-zA-Z0-9\.\*]+', min_length=1, max_length=30)


class ExcludedInstanceTypes(RootModel[List[ExcludedInstance]]):
    root: List[ExcludedInstance] = Field(..., max_length=400)


class ForceDelete(RootModel[bool]):
    root: bool


class GlobalTimeout(RootModel[int]):
    root: int


class HealthCheckGracePeriod(RootModel[int]):
    root: int


class HeartbeatTimeout(RootModel[int]):
    root: int


class HonorCooldown(RootModel[bool]):
    root: bool


class IncludeDeletedGroups(RootModel[bool]):
    root: bool


class InstanceGeneration(Enum):
    current = 'current'
    previous = 'previous'


class InstanceGenerations(RootModel[List[InstanceGeneration]]):
    root: List[InstanceGeneration]


class InstanceMetadataEndpointState(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class InstanceMetadataHttpPutResponseHopLimit(RootModel[conint(ge=1, le=64)]):
    root: conint(ge=1, le=64)


class InstanceMetadataHttpTokensState(Enum):
    optional = 'optional'
    required = 'required'


class InstanceMetadataOptions(BaseModel):
    HttpEndpoint: Optional[InstanceMetadataEndpointState] = None
    HttpPutResponseHopLimit: Optional[InstanceMetadataHttpPutResponseHopLimit] = None
    HttpTokens: Optional[InstanceMetadataHttpTokensState] = None


class InstanceProtected(RootModel[bool]):
    root: bool


class InstanceRefreshInProgressFault(RootModel[Any]):
    root: Any


class InstanceRefreshStatus(Enum):
    Pending = 'Pending'
    InProgress = 'InProgress'
    Successful = 'Successful'
    Failed = 'Failed'
    Cancelling = 'Cancelling'
    Cancelled = 'Cancelled'
    RollbackInProgress = 'RollbackInProgress'
    RollbackFailed = 'RollbackFailed'
    RollbackSuccessful = 'RollbackSuccessful'


class InstancesToUpdate(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class IntPercent(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class InvalidNextToken(RootModel[Any]):
    root: Any


class IrreversibleInstanceRefreshFault(RootModel[Any]):
    root: Any


class LaunchTemplateName(
    RootModel[constr(pattern=r'[a-zA-Z0-9\(\)\.\-/_]+', min_length=3, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9\(\)\.\-/_]+', min_length=3, max_length=128)


class LifecycleActionResult(RootModel[str]):
    root: str


class LifecycleActionToken(RootModel[constr(min_length=36, max_length=36)]):
    root: constr(min_length=36, max_length=36)


class LifecycleHookNames(RootModel[List[AsciiStringMaxLen255]]):
    root: List[AsciiStringMaxLen255] = Field(..., max_length=50)


class LifecycleState(Enum):
    Pending = 'Pending'
    Pending_Wait = 'Pending:Wait'
    Pending_Proceed = 'Pending:Proceed'
    Quarantined = 'Quarantined'
    InService = 'InService'
    Terminating = 'Terminating'
    Terminating_Wait = 'Terminating:Wait'
    Terminating_Proceed = 'Terminating:Proceed'
    Terminated = 'Terminated'
    Detaching = 'Detaching'
    Detached = 'Detached'
    EnteringStandby = 'EnteringStandby'
    Standby = 'Standby'
    Warmed_Pending = 'Warmed:Pending'
    Warmed_Pending_Wait = 'Warmed:Pending:Wait'
    Warmed_Pending_Proceed = 'Warmed:Pending:Proceed'
    Warmed_Terminating = 'Warmed:Terminating'
    Warmed_Terminating_Wait = 'Warmed:Terminating:Wait'
    Warmed_Terminating_Proceed = 'Warmed:Terminating:Proceed'
    Warmed_Terminated = 'Warmed:Terminated'
    Warmed_Stopped = 'Warmed:Stopped'
    Warmed_Running = 'Warmed:Running'
    Warmed_Hibernated = 'Warmed:Hibernated'


class LifecycleTransition(RootModel[str]):
    root: str


class LimitExceededFault(RootModel[Any]):
    root: Any


class LocalStorage(Enum):
    included = 'included'
    excluded = 'excluded'
    required = 'required'


class LocalStorageType(Enum):
    hdd = 'hdd'
    ssd = 'ssd'


class LocalStorageTypes(RootModel[List[LocalStorageType]]):
    root: List[LocalStorageType]


class MaxGroupPreparedCapacity(RootModel[conint(ge=-1)]):
    root: conint(ge=-1)


class MaxInstanceLifetime(RootModel[int]):
    root: int


class MaxNumberOfAutoScalingGroups(RootModel[int]):
    root: int


class MaxNumberOfLaunchConfigurations(RootModel[int]):
    root: int


class MaxRecords(RootModel[int]):
    root: int


class MetricDimensionName(RootModel[str]):
    root: str


class MetricDimensionValue(RootModel[str]):
    root: str


class MetricName(RootModel[str]):
    root: str


class MetricNamespace(RootModel[str]):
    root: str


class MetricScale(RootModel[float]):
    root: float


class MetricStatistic(Enum):
    Average = 'Average'
    Minimum = 'Minimum'
    Maximum = 'Maximum'
    SampleCount = 'SampleCount'
    Sum = 'Sum'


class MetricType(Enum):
    ASGAverageCPUUtilization = 'ASGAverageCPUUtilization'
    ASGAverageNetworkIn = 'ASGAverageNetworkIn'
    ASGAverageNetworkOut = 'ASGAverageNetworkOut'
    ALBRequestCountPerTarget = 'ALBRequestCountPerTarget'


class MetricUnit(RootModel[str]):
    root: str


class MinAdjustmentMagnitude(RootModel[int]):
    root: int


class MinAdjustmentStep(RootModel[int]):
    root: int


class MixedInstanceSpotPrice(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class MonitoringEnabled(RootModel[bool]):
    root: bool


class NoDevice(RootModel[bool]):
    root: bool


class NonZeroIntPercent(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class NotificationTargetResourceName(RootModel[constr(min_length=0, max_length=255)]):
    root: constr(min_length=0, max_length=255)


class NullableBoolean(RootModel[bool]):
    root: bool


class NullablePositiveDouble(RootModel[confloat(ge=0.0)]):
    root: confloat(ge=0.0)


class NullablePositiveInteger(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class NumberOfAutoScalingGroups(RootModel[int]):
    root: int


class NumberOfLaunchConfigurations(RootModel[int]):
    root: int


class OnDemandBaseCapacity(RootModel[int]):
    root: int


class OnDemandPercentageAboveBaseCapacity(RootModel[int]):
    root: int


class PolicyIncrement(RootModel[int]):
    root: int


class PredefinedLoadMetricType(Enum):
    ASGTotalCPUUtilization = 'ASGTotalCPUUtilization'
    ASGTotalNetworkIn = 'ASGTotalNetworkIn'
    ASGTotalNetworkOut = 'ASGTotalNetworkOut'
    ALBTargetGroupRequestCount = 'ALBTargetGroupRequestCount'


class PredefinedMetricPairType(Enum):
    ASGCPUUtilization = 'ASGCPUUtilization'
    ASGNetworkIn = 'ASGNetworkIn'
    ASGNetworkOut = 'ASGNetworkOut'
    ALBRequestCount = 'ALBRequestCount'


class PredefinedScalingMetricType(Enum):
    ASGAverageCPUUtilization = 'ASGAverageCPUUtilization'
    ASGAverageNetworkIn = 'ASGAverageNetworkIn'
    ASGAverageNetworkOut = 'ASGAverageNetworkOut'
    ALBRequestCountPerTarget = 'ALBRequestCountPerTarget'


class PredictiveScalingForecastValues(RootModel[List[MetricScale]]):
    root: List[MetricScale]


class PredictiveScalingMaxCapacityBreachBehavior(Enum):
    HonorMaxCapacity = 'HonorMaxCapacity'
    IncreaseMaxCapacity = 'IncreaseMaxCapacity'


class PredictiveScalingMaxCapacityBuffer(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class PredictiveScalingMode(Enum):
    ForecastAndScale = 'ForecastAndScale'
    ForecastOnly = 'ForecastOnly'


class PredictiveScalingSchedulingBufferTime(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Progress(RootModel[int]):
    root: int


class PropagateAtLaunch(RootModel[bool]):
    root: bool


class ProtectedFromScaleIn(RootModel[bool]):
    root: bool


class PutLifecycleHookAnswer(BaseModel):
    pass


class PutWarmPoolAnswer(BaseModel):
    pass


class RecordLifecycleActionHeartbeatAnswer(BaseModel):
    pass


class RefreshInstanceWarmup(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class RefreshStrategy(Enum):
    Rolling = 'Rolling'


class ResourceContentionFault(RootModel[Any]):
    root: Any


class ResourceInUseFault(RootModel[Any]):
    root: Any


class ResourceName(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class ReturnData(RootModel[bool]):
    root: bool


class ReuseOnScaleIn(RootModel[bool]):
    root: bool


class ScaleInProtectedInstances(Enum):
    Refresh = 'Refresh'
    Ignore = 'Ignore'
    Wait = 'Wait'


class ScalingActivityInProgressFault(RootModel[Any]):
    root: Any


class ScalingActivityStatusCode(Enum):
    PendingSpotBidPlacement = 'PendingSpotBidPlacement'
    WaitingForSpotInstanceRequestId = 'WaitingForSpotInstanceRequestId'
    WaitingForSpotInstanceId = 'WaitingForSpotInstanceId'
    WaitingForInstanceId = 'WaitingForInstanceId'
    PreInService = 'PreInService'
    InProgress = 'InProgress'
    WaitingForELBConnectionDraining = 'WaitingForELBConnectionDraining'
    MidLifecycleAction = 'MidLifecycleAction'
    WaitingForInstanceWarmup = 'WaitingForInstanceWarmup'
    Successful = 'Successful'
    Failed = 'Failed'
    Cancelled = 'Cancelled'
    WaitingForConnectionDraining = 'WaitingForConnectionDraining'


class ScalingPolicyEnabled(RootModel[bool]):
    root: bool


class ServiceLinkedRoleFailure(RootModel[Any]):
    root: Any


class SetInstanceProtectionAnswer(BaseModel):
    pass


class ShouldDecrementDesiredCapacity(RootModel[bool]):
    root: bool


class ShouldRespectGracePeriod(RootModel[bool]):
    root: bool


class SkipMatching(RootModel[bool]):
    root: bool


class SpotInstancePools(RootModel[int]):
    root: int


class SpotPrice(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class StandbyInstances(Enum):
    Terminate = 'Terminate'
    Ignore = 'Ignore'
    Wait = 'Wait'


class StepAdjustment(BaseModel):
    MetricIntervalLowerBound: Optional[MetricScale] = None
    MetricIntervalUpperBound: Optional[MetricScale] = None
    ScalingAdjustment: PolicyIncrement


class StepAdjustments(RootModel[List[StepAdjustment]]):
    root: List[StepAdjustment]


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TimestampType(RootModel[datetime]):
    root: datetime


class TotalLocalStorageGBRequest(BaseModel):
    Max: Optional[NullablePositiveDouble] = None
    Min: Optional[NullablePositiveDouble] = None


class VCpuCountRequest(BaseModel):
    Max: Optional[NullablePositiveInteger] = None
    Min: NullablePositiveInteger


class WarmPoolMinSize(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class WarmPoolSize(RootModel[int]):
    root: int


class WarmPoolState(Enum):
    Stopped = 'Stopped'
    Running = 'Running'
    Hibernated = 'Hibernated'


class WarmPoolStatus(Enum):
    PendingDelete = 'PendingDelete'


class XmlString(RootModel[str]):
    root: str


class XmlStringMaxLen1023(RootModel[constr(min_length=1, max_length=1023)]):
    root: constr(min_length=1, max_length=1023)


class XmlStringMaxLen1600(RootModel[constr(min_length=1, max_length=1600)]):
    root: constr(min_length=1, max_length=1600)


class XmlStringMaxLen19(RootModel[constr(min_length=1, max_length=19)]):
    root: constr(min_length=1, max_length=19)


class XmlStringMaxLen2047(RootModel[constr(min_length=1, max_length=2047)]):
    root: constr(min_length=1, max_length=2047)


class XmlStringMaxLen255(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class XmlStringMaxLen32(RootModel[constr(min_length=1, max_length=32)]):
    root: constr(min_length=1, max_length=32)


class XmlStringMaxLen511(RootModel[constr(min_length=1, max_length=511)]):
    root: constr(min_length=1, max_length=511)


class XmlStringMaxLen64(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class XmlStringMetricLabel(RootModel[constr(max_length=2047)]):
    root: constr(max_length=2047)


class XmlStringMetricStat(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class XmlStringUserData(RootModel[constr(max_length=21847)]):
    root: constr(max_length=21847)


class Action(Enum):
    AttachInstances = 'AttachInstances'


class Version(Enum):
    field_2011_01_01 = '2011-01-01'


class InstanceIds(RootModel[List[XmlStringMaxLen19]]):
    root: List[XmlStringMaxLen19]


class Action4(Enum):
    AttachLoadBalancerTargetGroups = 'AttachLoadBalancerTargetGroups'


class TargetGroupARNs(RootModel[List[XmlStringMaxLen511]]):
    root: List[XmlStringMaxLen511]


class Action8(Enum):
    AttachLoadBalancers = 'AttachLoadBalancers'


class LoadBalancerNames(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class Action12(Enum):
    AttachTrafficSources = 'AttachTrafficSources'


class Action16(Enum):
    BatchDeleteScheduledAction = 'BatchDeleteScheduledAction'


class ScheduledActionNames(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class Action20(Enum):
    BatchPutScheduledUpdateGroupAction = 'BatchPutScheduledUpdateGroupAction'


class Action24(Enum):
    CancelInstanceRefresh = 'CancelInstanceRefresh'


class Action28(Enum):
    CompleteLifecycleAction = 'CompleteLifecycleAction'


class LaunchTemplate1(BaseModel):
    LaunchTemplateId: Optional[XmlStringMaxLen255] = None
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )
    Version: Optional[XmlStringMaxLen255] = None


class Action32(Enum):
    CreateAutoScalingGroup = 'CreateAutoScalingGroup'


class AvailabilityZones(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class TerminationPolicies(RootModel[List[XmlStringMaxLen1600]]):
    root: List[XmlStringMaxLen1600]


class InstanceMonitoring(BaseModel):
    Enabled: Optional[MonitoringEnabled] = None


class MetadataOptions(BaseModel):
    HttpEndpoint: Optional[InstanceMetadataEndpointState] = None
    HttpPutResponseHopLimit: Optional[InstanceMetadataHttpPutResponseHopLimit] = None
    HttpTokens: Optional[InstanceMetadataHttpTokensState] = None


class Action36(Enum):
    CreateLaunchConfiguration = 'CreateLaunchConfiguration'


class SecurityGroups(RootModel[List[XmlString]]):
    root: List[XmlString]


class ClassicLinkVPCSecurityGroups(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class Action40(Enum):
    CreateOrUpdateTags = 'CreateOrUpdateTags'


class Action44(Enum):
    DeleteAutoScalingGroup = 'DeleteAutoScalingGroup'


class Action48(Enum):
    DeleteLaunchConfiguration = 'DeleteLaunchConfiguration'


class Action52(Enum):
    DeleteLifecycleHook = 'DeleteLifecycleHook'


class Action56(Enum):
    DeleteNotificationConfiguration = 'DeleteNotificationConfiguration'


class Action60(Enum):
    DeletePolicy = 'DeletePolicy'


class Action64(Enum):
    DeleteScheduledAction = 'DeleteScheduledAction'


class Action68(Enum):
    DeleteTags = 'DeleteTags'


class Action72(Enum):
    DeleteWarmPool = 'DeleteWarmPool'


class Action76(Enum):
    DescribeAccountLimits = 'DescribeAccountLimits'


class Action80(Enum):
    DescribeAdjustmentTypes = 'DescribeAdjustmentTypes'


class Action84(Enum):
    DescribeAutoScalingGroups = 'DescribeAutoScalingGroups'


class AutoScalingGroupNames(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class Action88(Enum):
    DescribeAutoScalingInstances = 'DescribeAutoScalingInstances'


class Action92(Enum):
    DescribeAutoScalingNotificationTypes = 'DescribeAutoScalingNotificationTypes'


class Action96(Enum):
    DescribeInstanceRefreshes = 'DescribeInstanceRefreshes'


class InstanceRefreshIds(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class Action100(Enum):
    DescribeLaunchConfigurations = 'DescribeLaunchConfigurations'


class LaunchConfigurationNames(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class Action104(Enum):
    DescribeLifecycleHookTypes = 'DescribeLifecycleHookTypes'


class Action108(Enum):
    DescribeLifecycleHooks = 'DescribeLifecycleHooks'


class Action112(Enum):
    DescribeLoadBalancerTargetGroups = 'DescribeLoadBalancerTargetGroups'


class Action116(Enum):
    DescribeLoadBalancers = 'DescribeLoadBalancers'


class Action120(Enum):
    DescribeMetricCollectionTypes = 'DescribeMetricCollectionTypes'


class Action124(Enum):
    DescribeNotificationConfigurations = 'DescribeNotificationConfigurations'


class Action128(Enum):
    DescribePolicies = 'DescribePolicies'


class PolicyNames(RootModel[List[ResourceName]]):
    root: List[ResourceName]


class PolicyTypes(RootModel[List[XmlStringMaxLen64]]):
    root: List[XmlStringMaxLen64]


class Action132(Enum):
    DescribeScalingActivities = 'DescribeScalingActivities'


class ActivityIds(RootModel[List[XmlString]]):
    root: List[XmlString]


class Action136(Enum):
    DescribeScalingProcessTypes = 'DescribeScalingProcessTypes'


class Action140(Enum):
    DescribeScheduledActions = 'DescribeScheduledActions'


class Action144(Enum):
    DescribeTags = 'DescribeTags'


class Action148(Enum):
    DescribeTerminationPolicyTypes = 'DescribeTerminationPolicyTypes'


class Action152(Enum):
    DescribeTrafficSources = 'DescribeTrafficSources'


class Action156(Enum):
    DescribeWarmPool = 'DescribeWarmPool'


class Action160(Enum):
    DetachInstances = 'DetachInstances'


class Action164(Enum):
    DetachLoadBalancerTargetGroups = 'DetachLoadBalancerTargetGroups'


class Action168(Enum):
    DetachLoadBalancers = 'DetachLoadBalancers'


class Action172(Enum):
    DetachTrafficSources = 'DetachTrafficSources'


class Action176(Enum):
    DisableMetricsCollection = 'DisableMetricsCollection'


class Metrics(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class Action180(Enum):
    EnableMetricsCollection = 'EnableMetricsCollection'


class Action184(Enum):
    EnterStandby = 'EnterStandby'


class Action188(Enum):
    ExecutePolicy = 'ExecutePolicy'


class Action192(Enum):
    ExitStandby = 'ExitStandby'


class Action196(Enum):
    GetPredictiveScalingForecast = 'GetPredictiveScalingForecast'


class Action200(Enum):
    PutLifecycleHook = 'PutLifecycleHook'


class Action204(Enum):
    PutNotificationConfiguration = 'PutNotificationConfiguration'


class NotificationTypes(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class Action208(Enum):
    PutScalingPolicy = 'PutScalingPolicy'


class Action212(Enum):
    PutScheduledUpdateGroupAction = 'PutScheduledUpdateGroupAction'


class PoolState(Enum):
    Stopped = 'Stopped'
    Running = 'Running'
    Hibernated = 'Hibernated'


class InstanceReusePolicy(BaseModel):
    ReuseOnScaleIn_1: Optional[ReuseOnScaleIn] = Field(None, alias='ReuseOnScaleIn')


class Action216(Enum):
    PutWarmPool = 'PutWarmPool'


class Action220(Enum):
    RecordLifecycleActionHeartbeat = 'RecordLifecycleActionHeartbeat'


class Action224(Enum):
    ResumeProcesses = 'ResumeProcesses'


class ScalingProcesses(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class Action228(Enum):
    RollbackInstanceRefresh = 'RollbackInstanceRefresh'


class Action232(Enum):
    SetDesiredCapacity = 'SetDesiredCapacity'


class Action236(Enum):
    SetInstanceHealth = 'SetInstanceHealth'


class Action240(Enum):
    SetInstanceProtection = 'SetInstanceProtection'


class Strategy(Enum):
    Rolling = 'Rolling'


class Action244(Enum):
    StartInstanceRefresh = 'StartInstanceRefresh'


class Action248(Enum):
    SuspendProcesses = 'SuspendProcesses'


class Action252(Enum):
    TerminateInstanceInAutoScalingGroup = 'TerminateInstanceInAutoScalingGroup'


class Action256(Enum):
    UpdateAutoScalingGroup = 'UpdateAutoScalingGroup'


class AcceleratorCountRequest(BaseModel):
    Max: Optional[NullablePositiveInteger] = None
    Min: Optional[NullablePositiveInteger] = None


class AcceleratorTotalMemoryMiBRequest(BaseModel):
    Max: Optional[NullablePositiveInteger] = None
    Min: Optional[NullablePositiveInteger] = None


class Activity(BaseModel):
    ActivityId: XmlString
    AutoScalingGroupARN: Optional[ResourceName] = None
    AutoScalingGroupName: XmlStringMaxLen255
    AutoScalingGroupState_1: Optional[AutoScalingGroupState] = Field(
        None, alias='AutoScalingGroupState'
    )
    Cause: XmlStringMaxLen1023
    Description: Optional[XmlString] = None
    Details: Optional[XmlString] = None
    EndTime: Optional[TimestampType] = None
    Progress_1: Optional[Progress] = Field(None, alias='Progress')
    StartTime: TimestampType
    StatusCode: ScalingActivityStatusCode
    StatusMessage: Optional[XmlStringMaxLen255] = None


class ActivityType(BaseModel):
    Activity_1: Optional[Activity] = Field(None, alias='Activity')


class AdjustmentType(BaseModel):
    AdjustmentType: Optional[XmlStringMaxLen255] = None


class AdjustmentTypes(RootModel[List[AdjustmentType]]):
    root: List[AdjustmentType]


class Alarm(BaseModel):
    AlarmARN: Optional[ResourceName] = None
    AlarmName: Optional[XmlStringMaxLen255] = None


class Alarms(RootModel[List[Alarm]]):
    root: List[Alarm]


class AutoScalingNotificationTypes(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class BaselineEbsBandwidthMbpsRequest(BaseModel):
    Max: Optional[NullablePositiveInteger] = None
    Min: Optional[NullablePositiveInteger] = None


class CancelInstanceRefreshAnswer(BaseModel):
    InstanceRefreshId: Optional[XmlStringMaxLen255] = None


class CancelInstanceRefreshType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255


class CheckpointPercentages(RootModel[List[NonZeroIntPercent]]):
    root: List[NonZeroIntPercent]


class CompleteLifecycleActionType(BaseModel):
    AutoScalingGroupName: ResourceName
    InstanceId: Optional[XmlStringMaxLen19] = None
    LifecycleActionResult_1: LifecycleActionResult = Field(
        ..., alias='LifecycleActionResult'
    )
    LifecycleActionToken_1: Optional[LifecycleActionToken] = Field(
        None, alias='LifecycleActionToken'
    )
    LifecycleHookName: AsciiStringMaxLen255


class DeleteAutoScalingGroupType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    ForceDelete_1: Optional[ForceDelete] = Field(None, alias='ForceDelete')


class DeleteLifecycleHookType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    LifecycleHookName: AsciiStringMaxLen255


class DeleteNotificationConfigurationType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    TopicARN: XmlStringMaxLen255


class DeletePolicyType(BaseModel):
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None
    PolicyName: ResourceName


class DeleteScheduledActionType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    ScheduledActionName: XmlStringMaxLen255


class DeleteWarmPoolType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    ForceDelete_1: Optional[ForceDelete] = Field(None, alias='ForceDelete')


class DescribeAccountLimitsAnswer(BaseModel):
    MaxNumberOfAutoScalingGroups_1: Optional[MaxNumberOfAutoScalingGroups] = Field(
        None, alias='MaxNumberOfAutoScalingGroups'
    )
    MaxNumberOfLaunchConfigurations_1: Optional[MaxNumberOfLaunchConfigurations] = (
        Field(None, alias='MaxNumberOfLaunchConfigurations')
    )
    NumberOfAutoScalingGroups_1: Optional[NumberOfAutoScalingGroups] = Field(
        None, alias='NumberOfAutoScalingGroups'
    )
    NumberOfLaunchConfigurations_1: Optional[NumberOfLaunchConfigurations] = Field(
        None, alias='NumberOfLaunchConfigurations'
    )


class DescribeAdjustmentTypesAnswer(BaseModel):
    AdjustmentTypes_1: Optional[AdjustmentTypes] = Field(None, alias='AdjustmentTypes')


class DescribeAutoScalingNotificationTypesAnswer(BaseModel):
    AutoScalingNotificationTypes_1: Optional[AutoScalingNotificationTypes] = Field(
        None, alias='AutoScalingNotificationTypes'
    )


class DescribeLifecycleHookTypesAnswer(BaseModel):
    LifecycleHookTypes: Optional[AutoScalingNotificationTypes] = None


class DescribeLifecycleHooksType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    LifecycleHookNames_1: Optional[LifecycleHookNames] = Field(
        None, alias='LifecycleHookNames'
    )


class DescribeLoadBalancerTargetGroupsRequest(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None


class DescribeLoadBalancersRequest(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None


class DescribeNotificationConfigurationsType(BaseModel):
    AutoScalingGroupNames_1: Optional[AutoScalingGroupNames] = Field(
        None, alias='AutoScalingGroupNames'
    )
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None


class DescribeScalingActivitiesType(BaseModel):
    ActivityIds_1: Optional[ActivityIds] = Field(None, alias='ActivityIds')
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None
    IncludeDeletedGroups_1: Optional[IncludeDeletedGroups] = Field(
        None, alias='IncludeDeletedGroups'
    )
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None


class DescribeTrafficSourcesRequest(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None
    TrafficSourceType: Optional[XmlStringMaxLen255] = None


class DescribeWarmPoolType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None


class Ebs(BaseModel):
    DeleteOnTermination: Optional[BlockDeviceEbsDeleteOnTermination] = None
    Encrypted: Optional[BlockDeviceEbsEncrypted] = None
    Iops: Optional[BlockDeviceEbsIops] = None
    SnapshotId: Optional[XmlStringMaxLen255] = None
    Throughput: Optional[BlockDeviceEbsThroughput] = None
    VolumeSize: Optional[BlockDeviceEbsVolumeSize] = None
    VolumeType: Optional[BlockDeviceEbsVolumeType] = None


class EnabledMetric(BaseModel):
    Granularity: Optional[XmlStringMaxLen255] = None
    Metric: Optional[XmlStringMaxLen255] = None


class EnabledMetrics(RootModel[List[EnabledMetric]]):
    root: List[EnabledMetric]


class ExecutePolicyType(BaseModel):
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None
    BreachThreshold: Optional[MetricScale] = None
    HonorCooldown_1: Optional[HonorCooldown] = Field(None, alias='HonorCooldown')
    MetricValue: Optional[MetricScale] = None
    PolicyName: ResourceName


class FailedScheduledUpdateGroupActionRequest(BaseModel):
    ErrorCode: Optional[XmlStringMaxLen64] = None
    ErrorMessage: Optional[XmlString] = None
    ScheduledActionName: XmlStringMaxLen255


class FailedScheduledUpdateGroupActionRequests(
    RootModel[List[FailedScheduledUpdateGroupActionRequest]]
):
    root: List[FailedScheduledUpdateGroupActionRequest]


class GetPredictiveScalingForecastType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    EndTime: TimestampType
    PolicyName: XmlStringMaxLen255
    StartTime: TimestampType


class InstanceRefreshLivePoolProgress(BaseModel):
    InstancesToUpdate_1: Optional[InstancesToUpdate] = Field(
        None, alias='InstancesToUpdate'
    )
    PercentageComplete: Optional[IntPercent] = None


class InstanceRefreshWarmPoolProgress(BaseModel):
    InstancesToUpdate_1: Optional[InstancesToUpdate] = Field(
        None, alias='InstancesToUpdate'
    )
    PercentageComplete: Optional[IntPercent] = None


class InstancesDistribution(BaseModel):
    OnDemandAllocationStrategy: Optional[XmlString] = None
    OnDemandBaseCapacity_1: Optional[OnDemandBaseCapacity] = Field(
        None, alias='OnDemandBaseCapacity'
    )
    OnDemandPercentageAboveBaseCapacity_1: Optional[
        OnDemandPercentageAboveBaseCapacity
    ] = Field(None, alias='OnDemandPercentageAboveBaseCapacity')
    SpotAllocationStrategy: Optional[XmlString] = None
    SpotInstancePools_1: Optional[SpotInstancePools] = Field(
        None, alias='SpotInstancePools'
    )
    SpotMaxPrice: Optional[MixedInstanceSpotPrice] = None


class LaunchConfigurationNameType(BaseModel):
    LaunchConfigurationName: XmlStringMaxLen255


class LaunchConfigurationNamesType(BaseModel):
    LaunchConfigurationNames_1: Optional[LaunchConfigurationNames] = Field(
        None, alias='LaunchConfigurationNames'
    )
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None


class LaunchTemplateSpecification(BaseModel):
    LaunchTemplateId: Optional[XmlStringMaxLen255] = None
    LaunchTemplateName_1: Optional[LaunchTemplateName] = Field(
        None, alias='LaunchTemplateName'
    )
    Version: Optional[XmlStringMaxLen255] = None


class LifecycleHook(BaseModel):
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None
    DefaultResult: Optional[LifecycleActionResult] = None
    GlobalTimeout_1: Optional[GlobalTimeout] = Field(None, alias='GlobalTimeout')
    HeartbeatTimeout_1: Optional[HeartbeatTimeout] = Field(
        None, alias='HeartbeatTimeout'
    )
    LifecycleHookName: Optional[AsciiStringMaxLen255] = None
    LifecycleTransition_1: Optional[LifecycleTransition] = Field(
        None, alias='LifecycleTransition'
    )
    NotificationMetadata: Optional[XmlStringMaxLen1023] = None
    NotificationTargetARN: Optional[NotificationTargetResourceName] = None
    RoleARN: Optional[XmlStringMaxLen255] = None


class LifecycleHookSpecification(BaseModel):
    DefaultResult: Optional[LifecycleActionResult] = None
    HeartbeatTimeout_1: Optional[HeartbeatTimeout] = Field(
        None, alias='HeartbeatTimeout'
    )
    LifecycleHookName: AsciiStringMaxLen255
    LifecycleTransition_1: LifecycleTransition = Field(..., alias='LifecycleTransition')
    NotificationMetadata: Optional[XmlStringMaxLen1023] = None
    NotificationTargetARN: Optional[NotificationTargetResourceName] = None
    RoleARN: Optional[XmlStringMaxLen255] = None


class LifecycleHookSpecifications(RootModel[List[LifecycleHookSpecification]]):
    root: List[LifecycleHookSpecification]


class LifecycleHooks(RootModel[List[LifecycleHook]]):
    root: List[LifecycleHook]


class LoadBalancerState(BaseModel):
    LoadBalancerName: Optional[XmlStringMaxLen255] = None
    State: Optional[XmlStringMaxLen255] = None


class LoadBalancerStates(RootModel[List[LoadBalancerState]]):
    root: List[LoadBalancerState]


class LoadBalancerTargetGroupState(BaseModel):
    LoadBalancerTargetGroupARN: Optional[XmlStringMaxLen511] = None
    State: Optional[XmlStringMaxLen255] = None


class LoadBalancerTargetGroupStates(RootModel[List[LoadBalancerTargetGroupState]]):
    root: List[LoadBalancerTargetGroupState]


class MemoryGiBPerVCpuRequest(BaseModel):
    Max: Optional[NullablePositiveDouble] = None
    Min: Optional[NullablePositiveDouble] = None


class MemoryMiBRequest(BaseModel):
    Max: Optional[NullablePositiveInteger] = None
    Min: NullablePositiveInteger


class MetricCollectionType(BaseModel):
    Metric: Optional[XmlStringMaxLen255] = None


class MetricCollectionTypes(RootModel[List[MetricCollectionType]]):
    root: List[MetricCollectionType]


class MetricDimension(BaseModel):
    Name: MetricDimensionName
    Value: MetricDimensionValue


class MetricDimensions(RootModel[List[MetricDimension]]):
    root: List[MetricDimension]


class MetricGranularityType(BaseModel):
    Granularity: Optional[XmlStringMaxLen255] = None


class MetricGranularityTypes(RootModel[List[MetricGranularityType]]):
    root: List[MetricGranularityType]


class NetworkBandwidthGbpsRequest(BaseModel):
    Max: Optional[NullablePositiveDouble] = None
    Min: Optional[NullablePositiveDouble] = None


class NetworkInterfaceCountRequest(BaseModel):
    Max: Optional[NullablePositiveInteger] = None
    Min: Optional[NullablePositiveInteger] = None


class NotificationConfiguration(BaseModel):
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None
    NotificationType: Optional[XmlStringMaxLen255] = None
    TopicARN: Optional[XmlStringMaxLen255] = None


class NotificationConfigurations(RootModel[List[NotificationConfiguration]]):
    root: List[NotificationConfiguration]


class PolicyARNType(BaseModel):
    Alarms_1: Optional[Alarms] = Field(None, alias='Alarms')
    PolicyARN: Optional[ResourceName] = None


class PredefinedMetricSpecification(BaseModel):
    PredefinedMetricType: MetricType
    ResourceLabel: Optional[XmlStringMaxLen1023] = None


class PredictiveScalingForecastTimestamps(RootModel[List[TimestampType]]):
    root: List[TimestampType]


class PredictiveScalingPredefinedLoadMetric(BaseModel):
    PredefinedMetricType: PredefinedLoadMetricType
    ResourceLabel: Optional[XmlStringMaxLen1023] = None


class PredictiveScalingPredefinedMetricPair(BaseModel):
    PredefinedMetricType: PredefinedMetricPairType
    ResourceLabel: Optional[XmlStringMaxLen1023] = None


class PredictiveScalingPredefinedScalingMetric(BaseModel):
    PredefinedMetricType: PredefinedScalingMetricType
    ResourceLabel: Optional[XmlStringMaxLen1023] = None


class ProcessNames(RootModel[List[XmlStringMaxLen255]]):
    root: List[XmlStringMaxLen255]


class ProcessType(BaseModel):
    ProcessName: XmlStringMaxLen255


class Processes(RootModel[List[ProcessType]]):
    root: List[ProcessType]


class ProcessesType(BaseModel):
    Processes_1: Optional[Processes] = Field(None, alias='Processes')


class PutLifecycleHookType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    DefaultResult: Optional[LifecycleActionResult] = None
    HeartbeatTimeout_1: Optional[HeartbeatTimeout] = Field(
        None, alias='HeartbeatTimeout'
    )
    LifecycleHookName: AsciiStringMaxLen255
    LifecycleTransition_1: Optional[LifecycleTransition] = Field(
        None, alias='LifecycleTransition'
    )
    NotificationMetadata: Optional[XmlStringMaxLen1023] = None
    NotificationTargetARN: Optional[NotificationTargetResourceName] = None
    RoleARN: Optional[XmlStringMaxLen255] = None


class PutNotificationConfigurationType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    NotificationTypes: AutoScalingNotificationTypes
    TopicARN: XmlStringMaxLen255


class PutScheduledUpdateGroupActionType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    DesiredCapacity: Optional[AutoScalingGroupDesiredCapacity] = None
    EndTime: Optional[TimestampType] = None
    MaxSize: Optional[AutoScalingGroupMaxSize] = None
    MinSize: Optional[AutoScalingGroupMinSize] = None
    Recurrence: Optional[XmlStringMaxLen255] = None
    ScheduledActionName: XmlStringMaxLen255
    StartTime: Optional[TimestampType] = None
    Time: Optional[TimestampType] = None
    TimeZone: Optional[XmlStringMaxLen255] = None


class PutWarmPoolType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    InstanceReusePolicy_1: Optional[InstanceReusePolicy] = Field(
        None, alias='InstanceReusePolicy'
    )
    MaxGroupPreparedCapacity_1: Optional[MaxGroupPreparedCapacity] = Field(
        None, alias='MaxGroupPreparedCapacity'
    )
    MinSize: Optional[WarmPoolMinSize] = None
    PoolState: Optional[WarmPoolState] = None


class RecordLifecycleActionHeartbeatType(BaseModel):
    AutoScalingGroupName: ResourceName
    InstanceId: Optional[XmlStringMaxLen19] = None
    LifecycleActionToken_1: Optional[LifecycleActionToken] = Field(
        None, alias='LifecycleActionToken'
    )
    LifecycleHookName: AsciiStringMaxLen255


class RefreshPreferences(BaseModel):
    AutoRollback_1: Optional[AutoRollback] = Field(None, alias='AutoRollback')
    CheckpointDelay_1: Optional[CheckpointDelay] = Field(None, alias='CheckpointDelay')
    CheckpointPercentages_1: Optional[CheckpointPercentages] = Field(
        None, alias='CheckpointPercentages'
    )
    InstanceWarmup: Optional[RefreshInstanceWarmup] = None
    MinHealthyPercentage: Optional[IntPercent] = None
    ScaleInProtectedInstances_1: Optional[ScaleInProtectedInstances] = Field(
        None, alias='ScaleInProtectedInstances'
    )
    SkipMatching_1: Optional[SkipMatching] = Field(None, alias='SkipMatching')
    StandbyInstances_1: Optional[StandbyInstances] = Field(
        None, alias='StandbyInstances'
    )


class RollbackInstanceRefreshAnswer(BaseModel):
    InstanceRefreshId: Optional[XmlStringMaxLen255] = None


class RollbackInstanceRefreshType(BaseModel):
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None


class ScalingProcessQuery(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    ScalingProcesses: Optional[ProcessNames] = None


class ScheduledUpdateGroupAction(BaseModel):
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None
    DesiredCapacity: Optional[AutoScalingGroupDesiredCapacity] = None
    EndTime: Optional[TimestampType] = None
    MaxSize: Optional[AutoScalingGroupMaxSize] = None
    MinSize: Optional[AutoScalingGroupMinSize] = None
    Recurrence: Optional[XmlStringMaxLen255] = None
    ScheduledActionARN: Optional[ResourceName] = None
    ScheduledActionName: Optional[XmlStringMaxLen255] = None
    StartTime: Optional[TimestampType] = None
    Time: Optional[TimestampType] = None
    TimeZone: Optional[XmlStringMaxLen255] = None


class ScheduledUpdateGroupActionRequest(BaseModel):
    DesiredCapacity: Optional[AutoScalingGroupDesiredCapacity] = None
    EndTime: Optional[TimestampType] = None
    MaxSize: Optional[AutoScalingGroupMaxSize] = None
    MinSize: Optional[AutoScalingGroupMinSize] = None
    Recurrence: Optional[XmlStringMaxLen255] = None
    ScheduledActionName: XmlStringMaxLen255
    StartTime: Optional[TimestampType] = None
    TimeZone: Optional[XmlStringMaxLen255] = None


class ScheduledUpdateGroupActionRequests(
    RootModel[List[ScheduledUpdateGroupActionRequest]]
):
    root: List[ScheduledUpdateGroupActionRequest]


class ScheduledUpdateGroupActions(RootModel[List[ScheduledUpdateGroupAction]]):
    root: List[ScheduledUpdateGroupAction]


class SetDesiredCapacityType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    DesiredCapacity: AutoScalingGroupDesiredCapacity
    HonorCooldown_1: Optional[HonorCooldown] = Field(None, alias='HonorCooldown')


class SetInstanceHealthQuery(BaseModel):
    HealthStatus: XmlStringMaxLen32
    InstanceId: XmlStringMaxLen19
    ShouldRespectGracePeriod_1: Optional[ShouldRespectGracePeriod] = Field(
        None, alias='ShouldRespectGracePeriod'
    )


class SetInstanceProtectionQuery(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    InstanceIds_1: InstanceIds = Field(..., alias='InstanceIds')
    ProtectedFromScaleIn_1: ProtectedFromScaleIn = Field(
        ..., alias='ProtectedFromScaleIn'
    )


class StartInstanceRefreshAnswer(BaseModel):
    InstanceRefreshId: Optional[XmlStringMaxLen255] = None


class SuspendedProcess(BaseModel):
    ProcessName: Optional[XmlStringMaxLen255] = None
    SuspensionReason: Optional[XmlStringMaxLen255] = None


class SuspendedProcesses(RootModel[List[SuspendedProcess]]):
    root: List[SuspendedProcess]


class Tag(BaseModel):
    Key: TagKey
    PropagateAtLaunch_1: Optional[PropagateAtLaunch] = Field(
        None, alias='PropagateAtLaunch'
    )
    ResourceId: Optional[XmlString] = None
    ResourceType: Optional[XmlString] = None
    Value: Optional[TagValue] = None


class TagDescription(BaseModel):
    Key: Optional[TagKey] = None
    PropagateAtLaunch_1: Optional[PropagateAtLaunch] = Field(
        None, alias='PropagateAtLaunch'
    )
    ResourceId: Optional[XmlString] = None
    ResourceType: Optional[XmlString] = None
    Value: Optional[TagValue] = None


class TagDescriptionList(RootModel[List[TagDescription]]):
    root: List[TagDescription]


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class TagsType(BaseModel):
    NextToken: Optional[XmlString] = None
    Tags: Optional[TagDescriptionList] = None


class TerminateInstanceInAutoScalingGroupType(BaseModel):
    InstanceId: XmlStringMaxLen19
    ShouldDecrementDesiredCapacity_1: ShouldDecrementDesiredCapacity = Field(
        ..., alias='ShouldDecrementDesiredCapacity'
    )


class TrafficSourceIdentifier(BaseModel):
    Identifier: XmlStringMaxLen511
    Type: Optional[XmlStringMaxLen511] = None


class TrafficSourceState(BaseModel):
    Identifier: Optional[XmlStringMaxLen511] = None
    State: Optional[XmlStringMaxLen255] = None
    TrafficSource: Optional[XmlStringMaxLen511] = None
    Type: Optional[XmlStringMaxLen511] = None


class TrafficSourceStates(RootModel[List[TrafficSourceState]]):
    root: List[TrafficSourceState]


class TrafficSources(RootModel[List[TrafficSourceIdentifier]]):
    root: List[TrafficSourceIdentifier]


class Values(RootModel[List[XmlString]]):
    root: List[XmlString]


class WarmPoolConfiguration(BaseModel):
    InstanceReusePolicy_1: Optional[InstanceReusePolicy] = Field(
        None, alias='InstanceReusePolicy'
    )
    MaxGroupPreparedCapacity_1: Optional[MaxGroupPreparedCapacity] = Field(
        None, alias='MaxGroupPreparedCapacity'
    )
    MinSize: Optional[WarmPoolMinSize] = None
    PoolState: Optional[WarmPoolState] = None
    Status: Optional[WarmPoolStatus] = None


class ScheduledUpdateGroupActions1(RootModel[List[ScheduledUpdateGroupActionRequest]]):
    root: List[ScheduledUpdateGroupActionRequest]


class LifecycleHookSpecificationList(RootModel[List[LifecycleHookSpecification]]):
    root: List[LifecycleHookSpecification]


class Preferences(BaseModel):
    AutoRollback_1: Optional[AutoRollback] = Field(None, alias='AutoRollback')
    CheckpointDelay_1: Optional[CheckpointDelay] = Field(None, alias='CheckpointDelay')
    CheckpointPercentages_1: Optional[CheckpointPercentages] = Field(
        None, alias='CheckpointPercentages'
    )
    InstanceWarmup: Optional[RefreshInstanceWarmup] = None
    MinHealthyPercentage: Optional[IntPercent] = None
    ScaleInProtectedInstances_1: Optional[ScaleInProtectedInstances] = Field(
        None, alias='ScaleInProtectedInstances'
    )
    SkipMatching_1: Optional[SkipMatching] = Field(None, alias='SkipMatching')
    StandbyInstances_1: Optional[StandbyInstances] = Field(
        None, alias='StandbyInstances'
    )


class Activities(RootModel[List[Activity]]):
    root: List[Activity]


class ActivitiesType(BaseModel):
    Activities_1: Activities = Field(..., alias='Activities')
    NextToken: Optional[XmlString] = None


class AttachInstancesQuery(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    InstanceIds_1: Optional[InstanceIds] = Field(None, alias='InstanceIds')


class AttachLoadBalancerTargetGroupsType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    TargetGroupARNs_1: TargetGroupARNs = Field(..., alias='TargetGroupARNs')


class AttachLoadBalancersType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    LoadBalancerNames_1: LoadBalancerNames = Field(..., alias='LoadBalancerNames')


class AttachTrafficSourcesType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    TrafficSources_1: TrafficSources = Field(..., alias='TrafficSources')


class AutoScalingInstanceDetails(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    AvailabilityZone: XmlStringMaxLen255
    HealthStatus: XmlStringMaxLen32
    InstanceId: XmlStringMaxLen19
    InstanceType: Optional[XmlStringMaxLen255] = None
    LaunchConfigurationName: Optional[XmlStringMaxLen255] = None
    LaunchTemplate: Optional[LaunchTemplateSpecification] = None
    LifecycleState: XmlStringMaxLen32
    ProtectedFromScaleIn: InstanceProtected
    WeightedCapacity: Optional[XmlStringMaxLen32] = None


class AutoScalingInstances(RootModel[List[AutoScalingInstanceDetails]]):
    root: List[AutoScalingInstanceDetails]


class AutoScalingInstancesType(BaseModel):
    AutoScalingInstances_1: Optional[AutoScalingInstances] = Field(
        None, alias='AutoScalingInstances'
    )
    NextToken: Optional[XmlString] = None


class BatchDeleteScheduledActionAnswer(BaseModel):
    FailedScheduledActions: Optional[FailedScheduledUpdateGroupActionRequests] = None


class BatchDeleteScheduledActionType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    ScheduledActionNames_1: ScheduledActionNames = Field(
        ..., alias='ScheduledActionNames'
    )


class BatchPutScheduledUpdateGroupActionAnswer(BaseModel):
    FailedScheduledUpdateGroupActions: Optional[
        FailedScheduledUpdateGroupActionRequests
    ] = None


class BatchPutScheduledUpdateGroupActionType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    ScheduledUpdateGroupActions: ScheduledUpdateGroupActionRequests


class BlockDeviceMapping(BaseModel):
    DeviceName: XmlStringMaxLen255
    Ebs_1: Optional[Ebs] = Field(None, alias='Ebs')
    NoDevice_1: Optional[NoDevice] = Field(None, alias='NoDevice')
    VirtualName: Optional[XmlStringMaxLen255] = None


class BlockDeviceMappings(RootModel[List[BlockDeviceMapping]]):
    root: List[BlockDeviceMapping]


class CapacityForecast(BaseModel):
    Timestamps: PredictiveScalingForecastTimestamps
    Values: PredictiveScalingForecastValues


class CreateLaunchConfigurationType(BaseModel):
    AssociatePublicIpAddress_1: Optional[AssociatePublicIpAddress] = Field(
        None, alias='AssociatePublicIpAddress'
    )
    BlockDeviceMappings_1: Optional[BlockDeviceMappings] = Field(
        None, alias='BlockDeviceMappings'
    )
    ClassicLinkVPCId: Optional[XmlStringMaxLen255] = None
    ClassicLinkVPCSecurityGroups_1: Optional[ClassicLinkVPCSecurityGroups] = Field(
        None, alias='ClassicLinkVPCSecurityGroups'
    )
    EbsOptimized_1: Optional[EbsOptimized] = Field(None, alias='EbsOptimized')
    IamInstanceProfile: Optional[XmlStringMaxLen1600] = None
    ImageId: Optional[XmlStringMaxLen255] = None
    InstanceId: Optional[XmlStringMaxLen19] = None
    InstanceMonitoring_1: Optional[InstanceMonitoring] = Field(
        None, alias='InstanceMonitoring'
    )
    InstanceType: Optional[XmlStringMaxLen255] = None
    KernelId: Optional[XmlStringMaxLen255] = None
    KeyName: Optional[XmlStringMaxLen255] = None
    LaunchConfigurationName: XmlStringMaxLen255
    MetadataOptions: Optional[InstanceMetadataOptions] = None
    PlacementTenancy: Optional[XmlStringMaxLen64] = None
    RamdiskId: Optional[XmlStringMaxLen255] = None
    SecurityGroups_1: Optional[SecurityGroups] = Field(None, alias='SecurityGroups')
    SpotPrice_1: Optional[SpotPrice] = Field(None, alias='SpotPrice')
    UserData: Optional[XmlStringUserData] = None


class CreateOrUpdateTagsType(BaseModel):
    Tags_1: Tags = Field(..., alias='Tags')


class DeleteTagsType(BaseModel):
    Tags_1: Tags = Field(..., alias='Tags')


class DescribeAutoScalingInstancesType(BaseModel):
    InstanceIds_1: Optional[InstanceIds] = Field(None, alias='InstanceIds')
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None


class DescribeInstanceRefreshesType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    InstanceRefreshIds_1: Optional[InstanceRefreshIds] = Field(
        None, alias='InstanceRefreshIds'
    )
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None


class DescribeLifecycleHooksAnswer(BaseModel):
    LifecycleHooks_1: Optional[LifecycleHooks] = Field(None, alias='LifecycleHooks')


class DescribeLoadBalancerTargetGroupsResponse(BaseModel):
    LoadBalancerTargetGroups: Optional[LoadBalancerTargetGroupStates] = None
    NextToken: Optional[XmlString] = None


class DescribeLoadBalancersResponse(BaseModel):
    LoadBalancers: Optional[LoadBalancerStates] = None
    NextToken: Optional[XmlString] = None


class DescribeMetricCollectionTypesAnswer(BaseModel):
    Granularities: Optional[MetricGranularityTypes] = None
    Metrics: Optional[MetricCollectionTypes] = None


class DescribeNotificationConfigurationsAnswer(BaseModel):
    NextToken: Optional[XmlString] = None
    NotificationConfigurations_1: NotificationConfigurations = Field(
        ..., alias='NotificationConfigurations'
    )


class DescribePoliciesType(BaseModel):
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None
    PolicyNames_1: Optional[PolicyNames] = Field(None, alias='PolicyNames')
    PolicyTypes_1: Optional[PolicyTypes] = Field(None, alias='PolicyTypes')


class DescribeScheduledActionsType(BaseModel):
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None
    EndTime: Optional[TimestampType] = None
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None
    ScheduledActionNames_1: Optional[ScheduledActionNames] = Field(
        None, alias='ScheduledActionNames'
    )
    StartTime: Optional[TimestampType] = None


class DescribeTerminationPolicyTypesAnswer(BaseModel):
    TerminationPolicyTypes: Optional[TerminationPolicies] = None


class DescribeTrafficSourcesResponse(BaseModel):
    NextToken: Optional[XmlString] = None
    TrafficSources: Optional[TrafficSourceStates] = None


class DetachInstancesAnswer(BaseModel):
    Activities_1: Optional[Activities] = Field(None, alias='Activities')


class DetachInstancesQuery(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    InstanceIds_1: Optional[InstanceIds] = Field(None, alias='InstanceIds')
    ShouldDecrementDesiredCapacity_1: ShouldDecrementDesiredCapacity = Field(
        ..., alias='ShouldDecrementDesiredCapacity'
    )


class DetachLoadBalancerTargetGroupsType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    TargetGroupARNs_1: TargetGroupARNs = Field(..., alias='TargetGroupARNs')


class DetachLoadBalancersType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    LoadBalancerNames_1: LoadBalancerNames = Field(..., alias='LoadBalancerNames')


class DetachTrafficSourcesType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    TrafficSources_1: TrafficSources = Field(..., alias='TrafficSources')


class DisableMetricsCollectionQuery(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    Metrics_1: Optional[Metrics] = Field(None, alias='Metrics')


class EnableMetricsCollectionQuery(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    Granularity: XmlStringMaxLen255
    Metrics_1: Optional[Metrics] = Field(None, alias='Metrics')


class EnterStandbyAnswer(BaseModel):
    Activities_1: Optional[Activities] = Field(None, alias='Activities')


class EnterStandbyQuery(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    InstanceIds_1: Optional[InstanceIds] = Field(None, alias='InstanceIds')
    ShouldDecrementDesiredCapacity_1: ShouldDecrementDesiredCapacity = Field(
        ..., alias='ShouldDecrementDesiredCapacity'
    )


class ExitStandbyAnswer(BaseModel):
    Activities_1: Optional[Activities] = Field(None, alias='Activities')


class ExitStandbyQuery(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    InstanceIds_1: Optional[InstanceIds] = Field(None, alias='InstanceIds')


class Filter(BaseModel):
    Name: Optional[XmlString] = None
    Values_1: Optional[Values] = Field(None, alias='Values')


class Filters(RootModel[List[Filter]]):
    root: List[Filter]


class Instance(BaseModel):
    AvailabilityZone: XmlStringMaxLen255
    HealthStatus: XmlStringMaxLen32
    InstanceId: XmlStringMaxLen19
    InstanceType: Optional[XmlStringMaxLen255] = None
    LaunchConfigurationName: Optional[XmlStringMaxLen255] = None
    LaunchTemplate: Optional[LaunchTemplateSpecification] = None
    LifecycleState_1: LifecycleState = Field(..., alias='LifecycleState')
    ProtectedFromScaleIn: InstanceProtected
    WeightedCapacity: Optional[XmlStringMaxLen32] = None


class InstanceRefreshProgressDetails(BaseModel):
    LivePoolProgress: Optional[InstanceRefreshLivePoolProgress] = None
    WarmPoolProgress: Optional[InstanceRefreshWarmPoolProgress] = None


class InstanceRequirements(BaseModel):
    AcceleratorCount: Optional[AcceleratorCountRequest] = None
    AcceleratorManufacturers_1: Optional[AcceleratorManufacturers] = Field(
        None, alias='AcceleratorManufacturers'
    )
    AcceleratorNames_1: Optional[AcceleratorNames] = Field(
        None, alias='AcceleratorNames'
    )
    AcceleratorTotalMemoryMiB: Optional[AcceleratorTotalMemoryMiBRequest] = None
    AcceleratorTypes_1: Optional[AcceleratorTypes] = Field(
        None, alias='AcceleratorTypes'
    )
    AllowedInstanceTypes_1: Optional[AllowedInstanceTypes] = Field(
        None, alias='AllowedInstanceTypes'
    )
    BareMetal_1: Optional[BareMetal] = Field(None, alias='BareMetal')
    BaselineEbsBandwidthMbps: Optional[BaselineEbsBandwidthMbpsRequest] = None
    BurstablePerformance_1: Optional[BurstablePerformance] = Field(
        None, alias='BurstablePerformance'
    )
    CpuManufacturers_1: Optional[CpuManufacturers] = Field(
        None, alias='CpuManufacturers'
    )
    ExcludedInstanceTypes_1: Optional[ExcludedInstanceTypes] = Field(
        None, alias='ExcludedInstanceTypes'
    )
    InstanceGenerations_1: Optional[InstanceGenerations] = Field(
        None, alias='InstanceGenerations'
    )
    LocalStorage_1: Optional[LocalStorage] = Field(None, alias='LocalStorage')
    LocalStorageTypes_1: Optional[LocalStorageTypes] = Field(
        None, alias='LocalStorageTypes'
    )
    MemoryGiBPerVCpu: Optional[MemoryGiBPerVCpuRequest] = None
    MemoryMiB: MemoryMiBRequest
    NetworkBandwidthGbps: Optional[NetworkBandwidthGbpsRequest] = None
    NetworkInterfaceCount: Optional[NetworkInterfaceCountRequest] = None
    OnDemandMaxPricePercentageOverLowestPrice: Optional[NullablePositiveInteger] = None
    RequireHibernateSupport: Optional[NullableBoolean] = None
    SpotMaxPricePercentageOverLowestPrice: Optional[NullablePositiveInteger] = None
    TotalLocalStorageGB: Optional[TotalLocalStorageGBRequest] = None
    VCpuCount: VCpuCountRequest


class Instances(RootModel[List[Instance]]):
    root: List[Instance]


class LaunchConfiguration(BaseModel):
    AssociatePublicIpAddress_1: Optional[AssociatePublicIpAddress] = Field(
        None, alias='AssociatePublicIpAddress'
    )
    BlockDeviceMappings_1: Optional[BlockDeviceMappings] = Field(
        None, alias='BlockDeviceMappings'
    )
    ClassicLinkVPCId: Optional[XmlStringMaxLen255] = None
    ClassicLinkVPCSecurityGroups_1: Optional[ClassicLinkVPCSecurityGroups] = Field(
        None, alias='ClassicLinkVPCSecurityGroups'
    )
    CreatedTime: TimestampType
    EbsOptimized_1: Optional[EbsOptimized] = Field(None, alias='EbsOptimized')
    IamInstanceProfile: Optional[XmlStringMaxLen1600] = None
    ImageId: XmlStringMaxLen255
    InstanceMonitoring_1: Optional[InstanceMonitoring] = Field(
        None, alias='InstanceMonitoring'
    )
    InstanceType: XmlStringMaxLen255
    KernelId: Optional[XmlStringMaxLen255] = None
    KeyName: Optional[XmlStringMaxLen255] = None
    LaunchConfigurationARN: Optional[ResourceName] = None
    LaunchConfigurationName: XmlStringMaxLen255
    MetadataOptions: Optional[InstanceMetadataOptions] = None
    PlacementTenancy: Optional[XmlStringMaxLen64] = None
    RamdiskId: Optional[XmlStringMaxLen255] = None
    SecurityGroups_1: Optional[SecurityGroups] = Field(None, alias='SecurityGroups')
    SpotPrice_1: Optional[SpotPrice] = Field(None, alias='SpotPrice')
    UserData: Optional[XmlStringUserData] = None


class LaunchConfigurations(RootModel[List[LaunchConfiguration]]):
    root: List[LaunchConfiguration]


class LaunchConfigurationsType(BaseModel):
    LaunchConfigurations_1: LaunchConfigurations = Field(
        ..., alias='LaunchConfigurations'
    )
    NextToken: Optional[XmlString] = None


class LaunchTemplateOverrides(BaseModel):
    InstanceRequirements_1: Optional[InstanceRequirements] = Field(
        None, alias='InstanceRequirements'
    )
    InstanceType: Optional[XmlStringMaxLen255] = None
    LaunchTemplateSpecification_1: Optional[LaunchTemplateSpecification] = Field(
        None, alias='LaunchTemplateSpecification'
    )
    WeightedCapacity: Optional[XmlStringMaxLen32] = None


class Metric(BaseModel):
    Dimensions: Optional[MetricDimensions] = None
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Namespace: MetricNamespace


class MetricStat(BaseModel):
    Metric_1: Metric = Field(..., alias='Metric')
    Stat: XmlStringMetricStat
    Unit: Optional[MetricUnit] = None


class Overrides(RootModel[List[LaunchTemplateOverrides]]):
    root: List[LaunchTemplateOverrides]


class RollbackDetails(BaseModel):
    InstancesToUpdateOnRollback: Optional[InstancesToUpdate] = None
    PercentageCompleteOnRollback: Optional[IntPercent] = None
    ProgressDetailsOnRollback: Optional[InstanceRefreshProgressDetails] = None
    RollbackReason: Optional[XmlStringMaxLen1023] = None
    RollbackStartTime: Optional[TimestampType] = None


class ScheduledActionsType(BaseModel):
    NextToken: Optional[XmlString] = None
    ScheduledUpdateGroupActions_1: Optional[ScheduledUpdateGroupActions] = Field(
        None, alias='ScheduledUpdateGroupActions'
    )


class TargetTrackingMetricStat(BaseModel):
    Metric_1: Metric = Field(..., alias='Metric')
    Stat: XmlStringMetricStat
    Unit: Optional[MetricUnit] = None


class AutoScalingGroupNamesType(BaseModel):
    AutoScalingGroupNames_1: Optional[AutoScalingGroupNames] = Field(
        None, alias='AutoScalingGroupNames'
    )
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None


class DescribeTagsType(BaseModel):
    Filters_1: Optional[Filters] = Field(None, alias='Filters')
    MaxRecords_1: Optional[MaxRecords] = Field(None, alias='MaxRecords')
    NextToken: Optional[XmlString] = None


class DescribeWarmPoolAnswer(BaseModel):
    Instances_1: Optional[Instances] = Field(None, alias='Instances')
    NextToken: Optional[XmlString] = None
    WarmPoolConfiguration_1: Optional[WarmPoolConfiguration] = Field(
        None, alias='WarmPoolConfiguration'
    )


class LaunchTemplate(BaseModel):
    LaunchTemplateSpecification_1: Optional[LaunchTemplateSpecification] = Field(
        None, alias='LaunchTemplateSpecification'
    )
    Overrides_1: Optional[Overrides] = Field(None, alias='Overrides')


class MetricDataQuery(BaseModel):
    Expression: Optional[XmlStringMaxLen1023] = None
    Id: XmlStringMaxLen255
    Label: Optional[XmlStringMetricLabel] = None
    MetricStat_1: Optional[MetricStat] = Field(None, alias='MetricStat')
    ReturnData_1: Optional[ReturnData] = Field(None, alias='ReturnData')


class MixedInstancesPolicy(BaseModel):
    InstancesDistribution_1: Optional[InstancesDistribution] = Field(
        None, alias='InstancesDistribution'
    )
    LaunchTemplate_1: Optional[LaunchTemplate] = Field(None, alias='LaunchTemplate')


class TargetTrackingMetricDataQuery(BaseModel):
    Expression: Optional[XmlStringMaxLen2047] = None
    Id: XmlStringMaxLen255
    Label: Optional[XmlStringMetricLabel] = None
    MetricStat: Optional[TargetTrackingMetricStat] = None
    ReturnData_1: Optional[ReturnData] = Field(None, alias='ReturnData')


class UpdateAutoScalingGroupType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    AvailabilityZones_1: Optional[AvailabilityZones] = Field(
        None, alias='AvailabilityZones'
    )
    CapacityRebalance: Optional[CapacityRebalanceEnabled] = None
    Context_1: Optional[Context] = Field(None, alias='Context')
    DefaultCooldown: Optional[Cooldown] = None
    DefaultInstanceWarmup_1: Optional[DefaultInstanceWarmup] = Field(
        None, alias='DefaultInstanceWarmup'
    )
    DesiredCapacity: Optional[AutoScalingGroupDesiredCapacity] = None
    DesiredCapacityType: Optional[XmlStringMaxLen255] = None
    HealthCheckGracePeriod_1: Optional[HealthCheckGracePeriod] = Field(
        None, alias='HealthCheckGracePeriod'
    )
    HealthCheckType: Optional[XmlStringMaxLen32] = None
    LaunchConfigurationName: Optional[XmlStringMaxLen255] = None
    LaunchTemplate: Optional[LaunchTemplateSpecification] = None
    MaxInstanceLifetime_1: Optional[MaxInstanceLifetime] = Field(
        None, alias='MaxInstanceLifetime'
    )
    MaxSize: Optional[AutoScalingGroupMaxSize] = None
    MinSize: Optional[AutoScalingGroupMinSize] = None
    MixedInstancesPolicy_1: Optional[MixedInstancesPolicy] = Field(
        None, alias='MixedInstancesPolicy'
    )
    NewInstancesProtectedFromScaleIn: Optional[InstanceProtected] = None
    PlacementGroup: Optional[XmlStringMaxLen255] = None
    ServiceLinkedRoleARN: Optional[ResourceName] = None
    TerminationPolicies_1: Optional[TerminationPolicies] = Field(
        None, alias='TerminationPolicies'
    )
    VPCZoneIdentifier: Optional[XmlStringMaxLen2047] = None


class DesiredConfiguration(BaseModel):
    LaunchTemplate: Optional[LaunchTemplateSpecification] = None
    MixedInstancesPolicy_1: Optional[MixedInstancesPolicy] = Field(
        None, alias='MixedInstancesPolicy'
    )


class AutoScalingGroup(BaseModel):
    AutoScalingGroupARN: Optional[ResourceName] = None
    AutoScalingGroupName: XmlStringMaxLen255
    AvailabilityZones_1: AvailabilityZones = Field(..., alias='AvailabilityZones')
    CapacityRebalance: Optional[CapacityRebalanceEnabled] = None
    Context_1: Optional[Context] = Field(None, alias='Context')
    CreatedTime: TimestampType
    DefaultCooldown: Cooldown
    DefaultInstanceWarmup_1: Optional[DefaultInstanceWarmup] = Field(
        None, alias='DefaultInstanceWarmup'
    )
    DesiredCapacity: AutoScalingGroupDesiredCapacity
    DesiredCapacityType: Optional[XmlStringMaxLen255] = None
    EnabledMetrics_1: Optional[EnabledMetrics] = Field(None, alias='EnabledMetrics')
    HealthCheckGracePeriod_1: Optional[HealthCheckGracePeriod] = Field(
        None, alias='HealthCheckGracePeriod'
    )
    HealthCheckType: XmlStringMaxLen32
    Instances_1: Optional[Instances] = Field(None, alias='Instances')
    LaunchConfigurationName: Optional[XmlStringMaxLen255] = None
    LaunchTemplate: Optional[LaunchTemplateSpecification] = None
    LoadBalancerNames_1: Optional[LoadBalancerNames] = Field(
        None, alias='LoadBalancerNames'
    )
    MaxInstanceLifetime_1: Optional[MaxInstanceLifetime] = Field(
        None, alias='MaxInstanceLifetime'
    )
    MaxSize: AutoScalingGroupMaxSize
    MinSize: AutoScalingGroupMinSize
    MixedInstancesPolicy_1: Optional[MixedInstancesPolicy] = Field(
        None, alias='MixedInstancesPolicy'
    )
    NewInstancesProtectedFromScaleIn: Optional[InstanceProtected] = None
    PlacementGroup: Optional[XmlStringMaxLen255] = None
    PredictedCapacity: Optional[AutoScalingGroupPredictedCapacity] = None
    ServiceLinkedRoleARN: Optional[ResourceName] = None
    Status: Optional[XmlStringMaxLen255] = None
    SuspendedProcesses_1: Optional[SuspendedProcesses] = Field(
        None, alias='SuspendedProcesses'
    )
    Tags: Optional[TagDescriptionList] = None
    TargetGroupARNs_1: Optional[TargetGroupARNs] = Field(None, alias='TargetGroupARNs')
    TerminationPolicies_1: Optional[TerminationPolicies] = Field(
        None, alias='TerminationPolicies'
    )
    TrafficSources_1: Optional[TrafficSources] = Field(None, alias='TrafficSources')
    VPCZoneIdentifier: Optional[XmlStringMaxLen2047] = None
    WarmPoolConfiguration_1: Optional[WarmPoolConfiguration] = Field(
        None, alias='WarmPoolConfiguration'
    )
    WarmPoolSize_1: Optional[WarmPoolSize] = Field(None, alias='WarmPoolSize')


class AutoScalingGroups(RootModel[List[AutoScalingGroup]]):
    root: List[AutoScalingGroup]


class AutoScalingGroupsType(BaseModel):
    AutoScalingGroups_1: AutoScalingGroups = Field(..., alias='AutoScalingGroups')
    NextToken: Optional[XmlString] = None


class CreateAutoScalingGroupType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    AvailabilityZones_1: Optional[AvailabilityZones] = Field(
        None, alias='AvailabilityZones'
    )
    CapacityRebalance: Optional[CapacityRebalanceEnabled] = None
    Context_1: Optional[Context] = Field(None, alias='Context')
    DefaultCooldown: Optional[Cooldown] = None
    DefaultInstanceWarmup_1: Optional[DefaultInstanceWarmup] = Field(
        None, alias='DefaultInstanceWarmup'
    )
    DesiredCapacity: Optional[AutoScalingGroupDesiredCapacity] = None
    DesiredCapacityType: Optional[XmlStringMaxLen255] = None
    HealthCheckGracePeriod_1: Optional[HealthCheckGracePeriod] = Field(
        None, alias='HealthCheckGracePeriod'
    )
    HealthCheckType: Optional[XmlStringMaxLen32] = None
    InstanceId: Optional[XmlStringMaxLen19] = None
    LaunchConfigurationName: Optional[XmlStringMaxLen255] = None
    LaunchTemplate: Optional[LaunchTemplateSpecification] = None
    LifecycleHookSpecificationList: Optional[LifecycleHookSpecifications] = None
    LoadBalancerNames_1: Optional[LoadBalancerNames] = Field(
        None, alias='LoadBalancerNames'
    )
    MaxInstanceLifetime_1: Optional[MaxInstanceLifetime] = Field(
        None, alias='MaxInstanceLifetime'
    )
    MaxSize: AutoScalingGroupMaxSize
    MinSize: AutoScalingGroupMinSize
    MixedInstancesPolicy_1: Optional[MixedInstancesPolicy] = Field(
        None, alias='MixedInstancesPolicy'
    )
    NewInstancesProtectedFromScaleIn: Optional[InstanceProtected] = None
    PlacementGroup: Optional[XmlStringMaxLen255] = None
    ServiceLinkedRoleARN: Optional[ResourceName] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    TargetGroupARNs_1: Optional[TargetGroupARNs] = Field(None, alias='TargetGroupARNs')
    TerminationPolicies_1: Optional[TerminationPolicies] = Field(
        None, alias='TerminationPolicies'
    )
    TrafficSources_1: Optional[TrafficSources] = Field(None, alias='TrafficSources')
    VPCZoneIdentifier: Optional[XmlStringMaxLen2047] = None


class InstanceRefresh(BaseModel):
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None
    DesiredConfiguration_1: Optional[DesiredConfiguration] = Field(
        None, alias='DesiredConfiguration'
    )
    EndTime: Optional[TimestampType] = None
    InstanceRefreshId: Optional[XmlStringMaxLen255] = None
    InstancesToUpdate_1: Optional[InstancesToUpdate] = Field(
        None, alias='InstancesToUpdate'
    )
    PercentageComplete: Optional[IntPercent] = None
    Preferences: Optional[RefreshPreferences] = None
    ProgressDetails: Optional[InstanceRefreshProgressDetails] = None
    RollbackDetails_1: Optional[RollbackDetails] = Field(None, alias='RollbackDetails')
    StartTime: Optional[TimestampType] = None
    Status: Optional[InstanceRefreshStatus] = None
    StatusReason: Optional[XmlStringMaxLen1023] = None


class InstanceRefreshes(RootModel[List[InstanceRefresh]]):
    root: List[InstanceRefresh]


class MetricDataQueries(RootModel[List[MetricDataQuery]]):
    root: List[MetricDataQuery]


class PredictiveScalingCustomizedCapacityMetric(BaseModel):
    MetricDataQueries_1: MetricDataQueries = Field(..., alias='MetricDataQueries')


class PredictiveScalingCustomizedLoadMetric(BaseModel):
    MetricDataQueries_1: MetricDataQueries = Field(..., alias='MetricDataQueries')


class PredictiveScalingCustomizedScalingMetric(BaseModel):
    MetricDataQueries_1: MetricDataQueries = Field(..., alias='MetricDataQueries')


class PredictiveScalingMetricSpecification(BaseModel):
    CustomizedCapacityMetricSpecification: Optional[
        PredictiveScalingCustomizedCapacityMetric
    ] = None
    CustomizedLoadMetricSpecification: Optional[
        PredictiveScalingCustomizedLoadMetric
    ] = None
    CustomizedScalingMetricSpecification: Optional[
        PredictiveScalingCustomizedScalingMetric
    ] = None
    PredefinedLoadMetricSpecification: Optional[
        PredictiveScalingPredefinedLoadMetric
    ] = None
    PredefinedMetricPairSpecification: Optional[
        PredictiveScalingPredefinedMetricPair
    ] = None
    PredefinedScalingMetricSpecification: Optional[
        PredictiveScalingPredefinedScalingMetric
    ] = None
    TargetValue: MetricScale


class PredictiveScalingMetricSpecifications(
    RootModel[List[PredictiveScalingMetricSpecification]]
):
    root: List[PredictiveScalingMetricSpecification]


class StartInstanceRefreshType(BaseModel):
    AutoScalingGroupName: XmlStringMaxLen255
    DesiredConfiguration_1: Optional[DesiredConfiguration] = Field(
        None, alias='DesiredConfiguration'
    )
    Preferences: Optional[RefreshPreferences] = None
    Strategy: Optional[RefreshStrategy] = None


class TargetTrackingMetricDataQueries(RootModel[List[TargetTrackingMetricDataQuery]]):
    root: List[TargetTrackingMetricDataQuery]


class PredictiveScalingConfiguration(BaseModel):
    MaxCapacityBreachBehavior: Optional[PredictiveScalingMaxCapacityBreachBehavior] = (
        None
    )
    MaxCapacityBuffer: Optional[PredictiveScalingMaxCapacityBuffer] = None
    MetricSpecifications: PredictiveScalingMetricSpecifications
    Mode: Optional[PredictiveScalingMode] = None
    SchedulingBufferTime: Optional[PredictiveScalingSchedulingBufferTime] = None


class CustomizedMetricSpecification(BaseModel):
    Dimensions: Optional[MetricDimensions] = None
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Metrics: Optional[TargetTrackingMetricDataQueries] = None
    Namespace: Optional[MetricNamespace] = None
    Statistic: Optional[MetricStatistic] = None
    Unit: Optional[MetricUnit] = None


class DescribeInstanceRefreshesAnswer(BaseModel):
    InstanceRefreshes_1: Optional[InstanceRefreshes] = Field(
        None, alias='InstanceRefreshes'
    )
    NextToken: Optional[XmlString] = None


class LoadForecast(BaseModel):
    MetricSpecification: PredictiveScalingMetricSpecification
    Timestamps: PredictiveScalingForecastTimestamps
    Values: PredictiveScalingForecastValues


class LoadForecasts(RootModel[List[LoadForecast]]):
    root: List[LoadForecast]


class TargetTrackingConfiguration(BaseModel):
    CustomizedMetricSpecification_1: Optional[CustomizedMetricSpecification] = Field(
        None, alias='CustomizedMetricSpecification'
    )
    DisableScaleIn_1: Optional[DisableScaleIn] = Field(None, alias='DisableScaleIn')
    PredefinedMetricSpecification_1: Optional[PredefinedMetricSpecification] = Field(
        None, alias='PredefinedMetricSpecification'
    )
    TargetValue: MetricScale


class GetPredictiveScalingForecastAnswer(BaseModel):
    CapacityForecast_1: CapacityForecast = Field(..., alias='CapacityForecast')
    LoadForecast: LoadForecasts
    UpdateTime: TimestampType


class PutScalingPolicyType(BaseModel):
    AdjustmentType: Optional[XmlStringMaxLen255] = None
    AutoScalingGroupName: XmlStringMaxLen255
    Cooldown_1: Optional[Cooldown] = Field(None, alias='Cooldown')
    Enabled: Optional[ScalingPolicyEnabled] = None
    EstimatedInstanceWarmup_1: Optional[EstimatedInstanceWarmup] = Field(
        None, alias='EstimatedInstanceWarmup'
    )
    MetricAggregationType: Optional[XmlStringMaxLen32] = None
    MinAdjustmentMagnitude_1: Optional[MinAdjustmentMagnitude] = Field(
        None, alias='MinAdjustmentMagnitude'
    )
    MinAdjustmentStep_1: Optional[MinAdjustmentStep] = Field(
        None, alias='MinAdjustmentStep'
    )
    PolicyName: XmlStringMaxLen255
    PolicyType: Optional[XmlStringMaxLen64] = None
    PredictiveScalingConfiguration_1: Optional[PredictiveScalingConfiguration] = Field(
        None, alias='PredictiveScalingConfiguration'
    )
    ScalingAdjustment: Optional[PolicyIncrement] = None
    StepAdjustments_1: Optional[StepAdjustments] = Field(None, alias='StepAdjustments')
    TargetTrackingConfiguration_1: Optional[TargetTrackingConfiguration] = Field(
        None, alias='TargetTrackingConfiguration'
    )


class ScalingPolicy(BaseModel):
    AdjustmentType: Optional[XmlStringMaxLen255] = None
    Alarms_1: Optional[Alarms] = Field(None, alias='Alarms')
    AutoScalingGroupName: Optional[XmlStringMaxLen255] = None
    Cooldown_1: Optional[Cooldown] = Field(None, alias='Cooldown')
    Enabled: Optional[ScalingPolicyEnabled] = None
    EstimatedInstanceWarmup_1: Optional[EstimatedInstanceWarmup] = Field(
        None, alias='EstimatedInstanceWarmup'
    )
    MetricAggregationType: Optional[XmlStringMaxLen32] = None
    MinAdjustmentMagnitude_1: Optional[MinAdjustmentMagnitude] = Field(
        None, alias='MinAdjustmentMagnitude'
    )
    MinAdjustmentStep_1: Optional[MinAdjustmentStep] = Field(
        None, alias='MinAdjustmentStep'
    )
    PolicyARN: Optional[ResourceName] = None
    PolicyName: Optional[XmlStringMaxLen255] = None
    PolicyType: Optional[XmlStringMaxLen64] = None
    PredictiveScalingConfiguration_1: Optional[PredictiveScalingConfiguration] = Field(
        None, alias='PredictiveScalingConfiguration'
    )
    ScalingAdjustment: Optional[PolicyIncrement] = None
    StepAdjustments_1: Optional[StepAdjustments] = Field(None, alias='StepAdjustments')
    TargetTrackingConfiguration_1: Optional[TargetTrackingConfiguration] = Field(
        None, alias='TargetTrackingConfiguration'
    )


class ScalingPolicies(RootModel[List[ScalingPolicy]]):
    root: List[ScalingPolicy]


class PoliciesType(BaseModel):
    NextToken: Optional[XmlString] = None
    ScalingPolicies_1: Optional[ScalingPolicies] = Field(None, alias='ScalingPolicies')
